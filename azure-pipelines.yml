trigger:
  - master
  - develop

pr:
  - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
    buildConfiguration: 'Release'

stages:
  - stage: PullRequest
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: Test
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'dotnet restore'
            inputs:
              command: restore
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              command: build
              arguments: '--no-restore'
              configuration: $(buildConfiguration)
          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              nobuild: true
              publishTestResults: true
              configuration: $(buildConfiguration)
              arguments: '--collect "Code coverage"'
  
  - stage: MainStage
    condition: ne(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: Version
        variables: 
          versionPrefixName: 'ci'
        steps:
          - checkout: none
          - bash: |
              set +x
              echo '##vso[task.setvariable variable=versionPrefixName]manual'
              set -x
            condition: eq(variables['Build.Reason'], 'Manual')
            displayName: Set Version Prefix Name
          - bash:  |
              set +x
              echo '##vso[task.setvariable variable=versionPrefix;isOutput=true]$(versionPrefixName)'
              set -x
            condition: eq(variables['Build.SourceBranchName'], 'develop')
            displayName: Set Version Prefix
            name: setPrefix
          - bash: |
              echo 'BuildId: $(Build.BuildId)'
              echo 'Branch: $(Build.SourceBranchName)'
              echo 'Build Configuration: $(buildConfiguration)'
              echo 'Version Prefix: $(setPrefix.versionPrefix)'
            displayName: Show Version Info
      - job: Publish
        dependsOn: Version
        variables:
          CI_BUILDID: $(Build.BuildId)
          CI_PRERELEASE: $[ dependencies.Version.outputs['setPrefix.versionPrefix'] ]
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'dotnet restore'
            inputs:
              command: restore
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              command: build
              arguments: '--no-restore'
              configuration: $(buildConfiguration)
          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              nobuild: true
              publishTestResults: true
              configuration: $(buildConfiguration)
              arguments: '--collect "Code coverage"'
          - task: DotNetCoreCLI@2
            displayName: 'dotnet pack'
            inputs:
              command: 'pack'
              configuration: $(buildConfiguration)
              packagesToPack: '**/*.csproj'
              nobuild: true
              includesymbols: true
              includesource: true
              versioningScheme: 'off'
          - task: PublishBuildArtifacts@1
            displayName: 'Publish the Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'